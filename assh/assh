#!/usr/bin/python3

import os
import re
import sys

def Key(line):
    return line.split(":")[0].strip()

def Value(line):
    return ":".join(line.split(":")[1:]).strip()

def Indent(line):
    return len(line) - len(line.lstrip())

def IsAnnotation(line):
    return line.lstrip().startswith("@")

def IsComment(line):
    return line.lstrip().startswith("#")

def IsEmptyLine(line):
    return len(line.strip()) == 0

def parse_config(lines):
    default = { "User": os.getlogin(), "Port": '22' }
    for line_idx in [i for i, line in enumerate(lines) if Key(line) == "default"]:
        i = line_idx + 1
        while i < len(lines) and Indent(lines[i]) > 0:
            default[Key(lines[i])] = Value(lines[i])
            i += 1

    config = {}
    
    for line_idx in [i for i, line in enumerate(lines) if Key(line) == "Host"]:
        hosts = Value(lines[line_idx]).split(" ")

        # annotations
        host_annotations = []
        i = line_idx - 1
        while i > 0 and Indent(lines[i]) == 0 and IsAnnotation(lines[i]):
            host_annotations.append(lines[i].strip())
            i -= 1

        # options
        if "@useDefault" in host_annotations:
            options = default.copy()
        else:
            options = {}

        i = line_idx + 1
        while i < len(lines) and Indent(lines[i]) > 0:
            options[Key(lines[i])] = Value(lines[i])
            i += 1

        for host in hosts:
            if host not in config:
                config[host] = {}
            
            config[host].update(options)
    
    # parse interpolations
    for host in config:
        options = config[host].copy()
        options["Host"] = host
        locals().update(options)

        for key in config[host]:
            value = config[host][key]
            interpolations = re.findall(r"\{\{ *(.*?) *\}\}", value)
            for interpolation in interpolations:
                config[host][key] = re.sub(r"\{\{ *(.*?) *\}\}", eval(interpolation), value)

    return config

def read_config(config_file_path):
    config_file_path = os.path.expanduser(config_file_path)

    if not os.path.exists(config_file_path):
        return None
    
    with open(config_file_path, "r") as f:
        lines = [line.rstrip() for line in f.readlines() if not IsComment(line) and not IsEmptyLine(line)]
    
    return parse_config(lines)

def print_error_msg(program_name, msg):
    print(f"{program_name}: error: {msg}")

def print_help(program_name):
    print(f"Usage:")
    print(f"  Connect to a host:")
    print(f"    {program_name} [-f|--file <config_file>] connect <host> [SSH options]")
    print(f"      -f, --file <config_file> : specify the config file. If not specified, ~/.assh.config is used.")
    print(f"      host : host to connect to. Can only use host in the config file.")
    print(f"      SSH options : additional ssh options")
    print()
    print(f"  List all hosts:")
    print(f"    {program_name} [-f|--file <config_file>] -l")
    print(f"    {program_name} [-f|--file <config_file>] --list")
    print(f"      -f, --file <config_file> : specify the config file. If not specified, ~/.assh.config is used.")
    print()
    print(f"  Update the SSH config file:")
    print(f"    {program_name} [-f|--file <config_file>] --update-ssh-config-file [--overwrite]")
    print(f"      -f, --file <config_file> : specify the config file. If not specified, ~/.assh.config is used.")
    print(f"      --overwrite : overwrite the SSH config file if it exists. The existed file will be backuped to ~/.ssh/config.old")
    print()
    print(f"  Print the help:")
    print(f"    {program_name} -h")
    print(f"    {program_name} --help")
    print()
    print(f"  Print the version:")
    print(f"    {program_name} -v")
    print(f"    {program_name} --version")
    print()

def print_version(program_name):
    print(f"{program_name} version 0.1.0")

if __name__ == "__main__":
    program_name = os.path.basename(sys.argv[0])

    if len(sys.argv) >= 2 and sys.argv[1] in ["-h", "--help"]:
        print_help(program_name)
        sys.exit(0)

    if len(sys.argv) >= 2 and sys.argv[1] in ["-v", "--version"]:
        print_version(program_name)
        sys.exit(0)

    argv = sys.argv[1:]

    if len(argv) >= 2 and argv[0] in ["-f", "--config-file"]:
        config_file_path = argv[1]
        argv = argv[2:]
    else:
        config_file_path = "~/.ssh/assh.config"

    config = read_config(config_file_path)
    if config is None:
        print_error_msg(program_name, f"config file not found: {config_file_path}")
        sys.exit(1)
    
    if len(argv) >= 1 and argv[0] in ["-l", "--list"]:
        print("\n".join(config.keys()))
        sys.exit(0)

    if len(argv) >= 1 and argv[0] in ["--update-ssh-config-file"]:
        ssh_config_file = os.path.expanduser("~/.ssh/config")
        if os.path.exists(ssh_config_file):
            if len(argv) >= 2 and argv[1] in ["--overwrite"]:
                os.system(f"cp {ssh_config_file} {ssh_config_file}.old")
            else:
                print_error_msg(program_name, f"SSH config file already exists. Use --overwrite to overwrite.")
                sys.exit(1)

        with open(ssh_config_file, "w") as f:
            for host in config:
                f.write(f"Host {host}\n")
                for key in config[host]:
                    f.write(f"    {key} {config[host][key]}\n")
                f.write("\n")
        sys.exit(0)

    if len(argv) >= 2 and argv[0] in ["c", "connect"]:
        host = argv[1].split(".")[0]
        dot_options = argv[1].split(".")[1:]

        if host not in config:
            print_error_msg(program_name, f"host not found: {host}")
            sys.exit(1)
        elif not set(["User", "HostName", "Port", "IdentityFile"]).issubset(set(config[host].keys())):
            print_error_msg(program_name, f"config for the host is incomplete: {host}")
            sys.exit(1)
        cmdline = f"ssh -p {config[host]['Port']}"

        if "IdentityFile" in config[host]:
            cmdline += f" -i {config[host]['IdentityFile']}"

        if "LocalFowrad" in config[host]:
            cmdline += f" -L {config[host]['LocalFowrad'.replace(' ', ':')]}"

        for local_forward_port in [item[1:] for item in dot_options if item.startswith("L")]:
            cmdline += f" -L {local_forward_port}:localhost:{local_forward_port}"
        
        for key in [key for key in config[host] if key not in ["User", "HostName", "Port", "IdentityFile"]]:
            cmdline += f" -o {key}={config[host][key]}"

        cmdline += f" {config[host]['User']}@{config[host]['HostName']}"
        os.system(cmdline)
        sys.exit(0)

    print_help(program_name)
    sys.exit(1)